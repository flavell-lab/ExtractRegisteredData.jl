var documenterSearchIndex = {"docs":
[{"location":"neuronmatch/#Registration-based-neuron-matching-API","page":"Registration-based neuron matching API","title":"Registration-based neuron matching API","text":"","category":"section"},{"location":"neuronmatch/#Commonly-used-functions","page":"Registration-based neuron matching API","title":"Commonly used functions","text":"","category":"section"},{"location":"neuronmatch/","page":"Registration-based neuron matching API","title":"Registration-based neuron matching API","text":"extract_roi_overlap\nmake_regmap_matrix\nfind_neurons\nmatch_neurons_across_datasets","category":"page"},{"location":"neuronmatch/#ExtractRegisteredData.extract_roi_overlap","page":"Registration-based neuron matching API","title":"ExtractRegisteredData.extract_roi_overlap","text":"Extracts ROI overlaps and activity differences.\n\nArguments\n\nbest_reg::Dict: Dictionary of best registration values.\nparam_path::Dict: Dictionary of paths to relevant files.\nparam::Dict: Dictionary of parameter values.\nreg_dir_key::String (optional): Key in param_path corresponding to the registration directory. Default path_dir_reg.\ntransformed_dir_key::String (optional): Key in param_path corresponding to the transformed ROI save directory. Default path_dir_transformed.\nreg_problems_key::String (optional): Key in param_path corresponding to the registration problems file. Default path_reg_prob.\nparam_path_moving::Union{Dict, Nothing}: If set, the param_path dictionary corresponding to the moving dataset. Otherwise, the method will assume\n\nthe moving and fixed datasets have the same path dictionary.\n\n\n\n\n\n","category":"function"},{"location":"neuronmatch/#ExtractRegisteredData.make_regmap_matrix","page":"Registration-based neuron matching API","title":"ExtractRegisteredData.make_regmap_matrix","text":"Assimilates ROIs from all time points and generates a quality-of-match matrix.\n\nArguments\n\nroi_overlaps::Dict: a dictionary of dictionaries of ROI matches for each pair of moving and fixed time points\nroi_activity_diff::Dict: a dictionaon of dictionaries of the difference between normalized red ROI acivity, for each pair of moving and fixed time points\nq_dict::Dict: a dictionary of dictionaries of dictionaries of the registration quality for each metric for each resolution for each pair of moving and fixed time points\nbest_reg::Dict: a dictionary of the registration that's being used, expressed as a tuple of resolutions, for each pair of moving and fixed time points\nparam::Dict: a dictionary of parameter settings to use, including:\nactivity_diff_threshold::Real: parameter that controls how much red-channel activity differences are penalized in the matrix.\n\nSmaller values = greater penalty. Default 0.3.     * watershed_error_penalty::Real: parameter that control how much watershed/UNet errors are penalized in the matrix. Smaller values = greater penalty. Default 0.5.     * quality_metric: metric to use in the q_dict parameter. Default NCC.     * matrix_self_weight::Real: amount of weight in the matrix to assign each ROI to itself. Default 0.5.     * size_mismatch_penalty::Real: penalty to apply to overlapping ROIs that don't fully overlap. Larger values = greater penalty. Default 2.\n\nwatershed_errors::Union{Nothing, Dict}: a dictionary of ROIs that might have had watershed or UNet errors for every time point.\n\nThis dictionary must be pre-shifted if moving and fixed datasets are not the same. Ignored if nothing.\n\nmax_fixed_t::Int: If the moving and fixed datasets are not the same, this number is added to each moving dataset time point   to distinguish the datasets in the matrix and label map.\n\nReturns\n\nregmap_matrix, a matrix whose (i,j)th entry encodes the quality of the match between ROIs i and j.\nlabel_map: a dictionary of dictionaries mapping original ROIs to new ROI labels, for each time point.\n\n\n\n\n\n","category":"function"},{"location":"neuronmatch/#ExtractRegisteredData.find_neurons","page":"Registration-based neuron matching API","title":"ExtractRegisteredData.find_neurons","text":"Groups ROIs into neurons based on a matrix of overlaps.\n\nArguments:\n\nregmap_matrix: Matrix of distances between the ROIs\nlabel_map::Dict: Dictionary of dictionaries mapping original ROIs to new ROI labels, for each time point.\nparam::Dict: Dictionary containing cluster_overlap_thresh and cluster_height_thresh parameter settings to use for clustering. \n\nReturns\n\nnew_label_map: Dictionary of dictionaries mapping original ROIs to neuron labels, for each time point.\ninv_map: Dictionary of dictionaries mapping time points to original ROIs, for each neuron label\nhmer: Raw clusters of the dataset.\n\n\n\n\n\n","category":"function"},{"location":"neuronmatch/#ExtractRegisteredData.match_neurons_across_datasets","page":"Registration-based neuron matching API","title":"ExtractRegisteredData.match_neurons_across_datasets","text":"Matches neurons across multiple datasets.\n\nArguments\n\nlabel_map_1::Dict: Label map of ROI/time points to neuron ID for dataset 1.\nlabel_map_2::Dict: Label map of ROI/time points to neuron ID for dataset 2.\ninv_map-reg::Dict: Map of neuron ID to ROI/time points for the registration between datasets. Time points in dataset 2 are shifted by max_fixed_t.\nmax_fixed_t::Int: Maximum time point in the first dataset.\n\n\n\n\n\n","category":"function"},{"location":"neuronmatch/#transformix-helper-functions","page":"Registration-based neuron matching API","title":"transformix helper functions","text":"","category":"section"},{"location":"neuronmatch/","page":"Registration-based neuron matching API","title":"Registration-based neuron matching API","text":"run_transformix_centroids\nrun_transformix_roi\nrun_transformix_img","category":"page"},{"location":"neuronmatch/#ExtractRegisteredData.run_transformix_centroids","page":"Registration-based neuron matching API","title":"ExtractRegisteredData.run_transformix_centroids","text":"Runs transformix to map centroids from the fixed volume to the moving volume. Note that this is the opposite of run_transformix_roi, because of the way transformix is implemented.\n\nArguments\n\npath::String: Path to directory containing elastix registration\noutput::String: Output file directory\ncentroids: File containing centroids to transform\nparameters::String: Transform parameter file\ntransformix_dir::String: Path to transformix executable\n\n\n\n\n\n","category":"function"},{"location":"neuronmatch/#ExtractRegisteredData.run_transformix_roi","page":"Registration-based neuron matching API","title":"ExtractRegisteredData.run_transformix_roi","text":"Runs transformix to map an ROI image from the moving volume to the fixed volume.  Modifies various transform parameters to force nearest-neighbors interpolation. Returns the resulting transformed image. Note that this is the opposite of run_transformix_centroids, because of the way transformix is implemented.\n\nArguments\n\npath::String: Path to directory containing elastix registration. Other paths should be absolute; they are NOT relative to this.\ninput::String: Input file path\noutput::String: Output file directory path\nparameters::String: Path to transform parameter file\nparameters_roi::String: Filename to save modified parameters.\ntransformix_dir::String: Path to transformix executable\n\n\n\n\n\n","category":"function"},{"location":"neuronmatch/#ExtractRegisteredData.run_transformix_img","page":"Registration-based neuron matching API","title":"ExtractRegisteredData.run_transformix_img","text":"Runs transformix to map an image from the moving volume to the fixed volume.  Returns the resulting transformed image. Note that this is the opposite of run_transformix_centroids, because of the way transformix is implemented.\n\nArguments\n\npath::String: Path to directory containing elastix registration\noutput::String: Output file directory\ninput::String: Input file path\nparameters::String: Transform parameter file\ntransformix_dir::String: Path to transformix executable\ninterpolation_degree::Int (optional): Interpolation degree. Default 1 (linear interpolation).\n\n\n\n\n\n","category":"function"},{"location":"neuronmatch/#Other-helper-functions","page":"Registration-based neuron matching API","title":"Other helper functions","text":"","category":"section"},{"location":"neuronmatch/","page":"Registration-based neuron matching API","title":"Registration-based neuron matching API","text":"pairwise_dist\nregister_neurons_overlap\nupdate_label_map\ninvert_label_map\ndelete_smeared_neurons","category":"page"},{"location":"neuronmatch/#ExtractRegisteredData.pairwise_dist","page":"Registration-based neuron matching API","title":"ExtractRegisteredData.pairwise_dist","text":"Finds the distances between each pair of ROIs based on similarity between rows of the regmap_matrix.\n\nArguments\n\nregmap_matrix: matrix of registration matches\n\nOptional keyword arguments\n\nthreshold::Real: a small number added to the denominator to ensure there are no divide-by-zero errors. Default 1e-16.\ndtype::Type: Data type of matrix. Default Float64.\n\n\n\n\n\n","category":"function"},{"location":"neuronmatch/#ExtractRegisteredData.register_neurons_overlap","page":"Registration-based neuron matching API","title":"ExtractRegisteredData.register_neurons_overlap","text":"Matches ROIs from registered time points together based on the overlap heuristic.\n\nArguments\n\ninferred_roi: ROI image array from the moving volume that has had the registration applied to it (eg via transformix)\nroi: ROI image array from the fixed time point\ninferred_activity: array of activities of each ROI in the marker channel from the moving time point\nactivity: array of activities of each ROI in the marker channel from the fixed time point\n\nReturns\n\noverlapping_rois: a dictionary of ROI matches between the moving and fixed volumes.   The values of the dictionary are the amount of overlap as a fraction of total ROI size.   Eg: if ROI 15 in the moving volume has size 100, ROI 10 in the fixed volume has size 80, and the overlap has size 50,   (15, 10) => (0.5, 0.625) would be an entry in the dictionary.\nactivity_mismatch: a dictionary of the differences between the normalized activity of the ROIs   between the moving and fixed time points.\n\n\n\n\n\n","category":"function"},{"location":"neuronmatch/#ExtractRegisteredData.update_label_map","page":"Registration-based neuron matching API","title":"ExtractRegisteredData.update_label_map","text":"Updates ROI label map label_map to include ROI matches matches, and returns updated version.\n\n\n\n\n\n","category":"function"},{"location":"neuronmatch/#ExtractRegisteredData.invert_label_map","page":"Registration-based neuron matching API","title":"ExtractRegisteredData.invert_label_map","text":"Inverts ROI label map label_map, so that new ROIs map back to dictionaries mapping original time points to original ROIs.\n\n\n\n\n\n","category":"function"},{"location":"neuronmatch/#ExtractRegisteredData.delete_smeared_neurons","page":"Registration-based neuron matching API","title":"ExtractRegisteredData.delete_smeared_neurons","text":"Deletes neurons that might come from huge deformations in registration from an roi (neurons that have more pixels than threshold).\n\n\n\n\n\n","category":"function"},{"location":"extract/#Traces-extraction-API","page":"Traces extraction API","title":"Traces extraction API","text":"","category":"section"},{"location":"extract/#Extract-activity-channel-traces","page":"Traces extraction API","title":"Extract activity channel traces","text":"","category":"section"},{"location":"extract/","page":"Traces extraction API","title":"Traces extraction API","text":"extract_activity_am_reg\nextract_traces\nmake_traces_array","category":"page"},{"location":"extract/#ExtractRegisteredData.extract_activity_am_reg","page":"Traces extraction API","title":"ExtractRegisteredData.extract_activity_am_reg","text":"Extracts activity marker activity from camera-alignment registration. Returns any errors encountered.\n\nArguments\n\nparam_path::Dict: Dictionary of paths to relevant files.\nparam::Dict: Directory of imaging parameters.\nshear_params_dict::Dict: Dictionary of shear-correction parameters used in the marker channel.\ncrop_params_dict::Dict: Dictionary of cropping parameters used in the marker channel.\nmhd_path_key::String (optional): Key in param_path to path to unprocessed activity-channel MHD files. Default path_dir_mhd\nroi_dir_key::String (optional): Key in param_path to directory of neuron ROI files. Default path_dir_roi_watershed.\ntransform_key::String (optional): Key in param_path to file name of transform parameter files. Default path_dir_transformed_activity_marker_avg.\n\n\n\n\n\n","category":"function"},{"location":"extract/#ExtractRegisteredData.extract_traces","page":"Traces extraction API","title":"ExtractRegisteredData.extract_traces","text":"Extracts traces from neuron labels.\n\nArguments\n\ninverted_map: Dictionary of dictionaries mapping time points to original ROIs, for each neuron label\ngcamp_data_dir: Directory containing GCaMP activity data\n\n\n\n\n\n","category":"function"},{"location":"extract/#ExtractRegisteredData.make_traces_array","page":"Traces extraction API","title":"ExtractRegisteredData.make_traces_array","text":"Turns a traces dictionary into a traces array. Also outputs a heatmap of the array, and the labels of which neurons correspond to which rows.\n\nArguments\n\ntraces::Dict: Dictionary of traces.\nthreshold::Real (optional): Minimum number of time points necessary to include a neuron in the traces array.      Default 1 (all ROIs displayed). It is recommended to set either this or the valid_rois parameter.\nvalid_rois (optional): If set, use this set of neurons (in order) in the array. Set entries to nothing to insert gaps in the data      (eg: to preserve the previous labeling of neurons)\ncontrast::Real (optional): If set, increases the contrast of the heatmap. Does not change the output array.\nreplace_blank::Bool (optional): If set, replaces all blank entries in the traces (where the neuron was not found in that time point)      with the median activity for that neuron.\ncluster::Bool (optional): If set to true, cluster the neurons by activity similarity.\n\n\n\n\n\n","category":"function"},{"location":"extract/#SWF360-error-rate-computation","page":"Traces extraction API","title":"SWF360 error rate computation","text":"","category":"section"},{"location":"extract/","page":"Traces extraction API","title":"Traces extraction API","text":"error_rate","category":"page"},{"location":"extract/#ExtractRegisteredData.error_rate","page":"Traces extraction API","title":"ExtractRegisteredData.error_rate","text":"Computes the error rate of the traces, assuming they are all supposed to have constant activity.\n\nArguments\n\ntraces: the traces\n\nOptional keyword arguments\n\nfactor::Real: multiplicative amount by which activity must differ from median to count as an error. Default 1.5.\ngfp_thresh::Real: threshold amount for a neuron to be counted as having GFP (error rate is adjusted to account for mismatched neurons that have similar activity)\nnum_thresh::Real: minimum amount of neurons needed to consider a trace\n\n\n\n\n\n","category":"function"},{"location":"extract/#Visualization-tools","page":"Traces extraction API","title":"Visualization tools","text":"","category":"section"},{"location":"extract/","page":"Traces extraction API","title":"Traces extraction API","text":"output_roi_candidates","category":"page"},{"location":"extract/#ExtractRegisteredData.output_roi_candidates","page":"Traces extraction API","title":"ExtractRegisteredData.output_roi_candidates","text":"Outputs neuron ROI candidates and a plot of their activity.\n\nArguments\n\ntraces::Dict: Dictionary of traces for all ROIs\ninv_map::Dict: Dictionary that maps ROI identity to time points and UNet ROI labels\nparam_path::Dict: Dictionary of paths to relevant files\nparam::Dict: Dictionary of parameter values\nget_basename::Function: Function that gets the basename of an MHD file\nchannel::Integer: Channel of the image to be displayed\nt_range: All time points\n\n\n\n\n\n","category":"function"},{"location":"#ExtractRegisteredData.jl-Documentation","page":"ExtractRegisteredData.jl Documentation","title":"ExtractRegisteredData.jl Documentation","text":"","category":"section"},{"location":"","page":"ExtractRegisteredData.jl Documentation","title":"ExtractRegisteredData.jl Documentation","text":"Pages = [\"neuronmatch.md\", \"extract.md\"]","category":"page"}]
}
